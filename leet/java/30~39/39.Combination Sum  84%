import java.util.ArrayList;
import java.util.List;
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList<>();
        recursion(list, new ArrayList<>(), candidates, target, 0);
        return list;
    }
    private void recursion(List<List<Integer>> list, List<Integer> pre, int[] candidates, int target, int index){
        if(index == candidates.length) return;
        if(target > 0){
            pre.add(candidates[index]);
            recursion(list, pre, candidates, target - candidates[index], index);
            pre.remove(pre.size() - 1);
            recursion(list, pre, candidates, target, ++index);
        }
        else if(target == 0){
            list.add(new ArrayList<>(pre));
            return;
        }
        else if(target < 0) return;
    }
}
