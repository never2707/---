class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        if(digits == null || digits.length() == 0){
            return result;
        }

        //Creating a map for string the characters to
        //corresponding number

        Map<Character, String> phoneMap = new HashMap<>();
        phoneMap.put('2', "abc");
        phoneMap.put('3', "def");
        phoneMap.put('4', "ghi");
        phoneMap.put('5', "jkl");
        phoneMap.put('6', "mno");
        phoneMap.put('7', "pqrs");
        phoneMap.put('8', "tuv");
        phoneMap.put('9', "wxyz");

        recursion(digits, phoneMap, 0, new StringBuilder(),result);
        return result; 

    }

    private void recursion(String digits, Map<Character, 
    String>phoneMap, int index, StringBuilder sb,
    List<String>result){
        if(index == digits.length()){
            result.add(sb.toString());
            return;
        }

        char digit = digits.charAt(index);
        String letters = phoneMap.get(digit);

        for(int i = 0; i<letters.length();i++){
            char letter = letters.charAt(i);
            sb.append(letter);
            recursion(digits, phoneMap, index+1, sb, result);
            sb.deleteCharAt(sb.length()-1);
        }
    }
}
